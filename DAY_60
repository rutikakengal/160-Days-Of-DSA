# 3186. Maximum Total Damage With Spell Casting

class Solution {
public:
    long long maximumTotalDamage(vector<int>& power) {
        unordered_map<int, long long> damage;
        for (int p : power) damage[p] += p; 
        
        vector<int> keys;
        for (auto& [k, _] : damage) keys.push_back(k);
        sort(keys.begin(), keys.end());
        
        int n = keys.size();
        vector<long long> dp(n, 0);
        dp[0] = damage[keys[0]];
        
        for (int i = 1; i < n; i++) {
            long long take = damage[keys[i]];
            int j = i - 1;
            while (j >= 0 && keys[j] >= keys[i] - 2) j--;
            if (j >= 0) take += dp[j];
            dp[i] = max(dp[i - 1], take);
        }
        
        return dp.back();
    }
};
