Majority Element II
You are given an array of integer arr[] where each number represents a vote to a candidate. Return the candidates that have votes greater than one-third of the total votes, If there's not a majority vote, return an empty array. 

Note: The answer should be returned in an increasing format.

Examples:

Input: arr[] = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]
Output: [5, 6]
Explanation: 5 and 6 occur more n/3 times.

Answer :



class Solution {
    // Function to find the majority elements in the array
    public List<Integer> findMajority(int[] nums) {
        int n = nums.length;

        // Step 1: Find potential candidates
        int ele1 = -1, ele2 = -1, can1 = 0, can2 = 0;

        for (int ele : nums) {
            if (ele == ele1) {
                can1++;
            } else if (ele == ele2) {
                can2++;
            } else if (can1 == 0) {
                ele1 = ele;
                can1 = 1;
            } else if (can2 == 0) {
                ele2 = ele;
                can2 = 1;
            } else {
                can1--;
                can2--;
            }
        }

        // Step 2: Verify candidates
        can1 = 0;
        can2 = 0;
        for (int ele : nums) {
            if (ele == ele1) {
                can1++;
            } else if (ele == ele2) {
                can2++;
            }
        }

        // Step 3: Add valid candidates to the result
        List<Integer> result = new ArrayList<>();
        if (can1 > n / 3) {
            result.add(ele1);
        }
        if (can2 > n / 3) {
            result.add(ele2);
        }

        // Step 4: Sort the result in ascending order
        Collections.sort(result);

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {2, 1, 6, 6, 6, 6, 6, 5, 5, 5, 5};
        List<Integer> result = solution.findMajority(nums);
        System.out.println(result); // Output: [5, 6]
    }
}
