Maximum Product Subarray
Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr[].

Note: It is guaranteed that the output fits in a 32-bit integer.

Examples

Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.

Answer :

class Solution {
    int maxProduct(int[] arr) {
        int n = arr.length;
        
        if (n == 0) return 0;

        int maxProduct = arr[0]; 
        int currentMax = arr[0]; 
        int currentMin = arr[0]; 

        for (int i = 1; i < n; i++) {
            if (arr[i] < 0) {
               
                int temp = currentMax;
                currentMax = currentMin;
                currentMin = temp;
            }

         
            currentMax = Math.max(arr[i], currentMax * arr[i]);
            currentMin = Math.min(arr[i], currentMin * arr[i]);

          
            maxProduct = Math.max(maxProduct, currentMax);
        }

        return maxProduct;
    }
}
