Minimize the Heights II
Given an array arr[] denoting heights of N towers and a positive integer K.

For each tower, you must perform exactly one of the following operations exactly once.

Increase the height of the tower by K
Decrease the height of the tower by K
Find out the minimum possible difference between the height of the shortest and tallest towers after you have modified each tower.

You can find a slight modification of the problem here.
Note: It is compulsory to increase or decrease the height by K for each tower. After the operation, the resultant array should not contain any negative integers.

Answer :



// User function Template for Java

class Solution {
    int getMinDiff(int[] arr, int k) {
        // Check if array is empty or has only one tower
        if (arr.length == 1) return 0;

        int n = arr.length;
        // Sort the array
        Arrays.sort(arr);

        // The initial difference between the maximum and minimum heights
        int res = arr[n - 1] - arr[0];

        for (int i = 1; i < n; i++) {
            // Skip if reducing arr[i] by k makes it negative
            if (arr[i] - k < 0)
                continue;

            // Calculate the new minimum and maximum heights
            int minH = Math.min(arr[0] + k, arr[i] - k);
            int maxH = Math.max(arr[i - 1] + k, arr[n - 1] - k);

            // Update the result with the minimum difference
            res = Math.min(res, maxH - minH);
        }
        return res;
    }
}
