# 1488. Avoid Flood in The City 

class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        int n = rains.size();
        vector<int> ans(n, 1); // default: dry lake 1 (for 0 days)
        unordered_map<int, int> full; // lake -> last day it was filled
        set<int> dryDays; // indices of days we can dry lakes
        
        for (int i = 0; i < n; ++i) {
            if (rains[i] == 0) {
                dryDays.insert(i);
            } else {
                int lake = rains[i];
                ans[i] = -1; // raining day
                
                // if this lake was already full, we need to dry it before today
                if (full.count(lake)) {
                    // find the earliest dry day after last fill day
                    auto it = dryDays.upper_bound(full[lake]);
                    if (it == dryDays.end()) return {}; // no available dry day -> flood
                    ans[*it] = lake; // dry this lake on that day
                    dryDays.erase(it);
                }
                full[lake] = i; // mark the lake as full on this day
            }
        }
        return ans;
    }
};
